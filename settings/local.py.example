# This file is exec'd from settings.py, so it has access to and can
# modify all the variables in settings.py.

# If this file is changed in development, the development server will
# have to be manually restarted because changes will not be noticed
# immediately.

import os.path

BASE_DIR = os.path.dirname(os.path.dirname(__file__))

# TEMPLATE_DEBUG Deprecated in Django 1.8, but filebrowser want to eat it
DEBUG = TEMPLATE_DEBUG = True

BASE_URL = "http://127.0.0.1:8000"

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

# Make these unique, and don't share it with anybody.
SECRET_KEY = "secret"
NEVERCACHE_KEY = "secret"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, "static")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "staticfiles"),
]


DATABASES = {
    "default": {
        # Ends with "postgresql_psycopg2", "mysql", "sqlite3" or "oracle".
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "venv", "debug", "dev.db"),
        # "USER": "secret",
        # "PASSWORD": "secret",
        # "HOST": "/var/run/mysqld/mysqld.sock",
        # "PORT": "",
    }
}


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = ""
DEFAULT_FROM_EMAIL = ""
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ""
EMAIL_USE_SSL = True
EMAIL_PORT = 465  # default smtp w/ SSL; 465/25025, or w/o SSL 25/587/2525


# FILEBROWSER_DIRECTORY = "/media/uploads"
from django.core.files.storage import FileSystemStorage
from filebrowser.sites import site
site.storage = FileSystemStorage(location="static", base_url="/static/")
site.directory = "img/"


import os
import logging
from logging import handlers
class GroupWriteRotatingFileHandler(logging.handlers.RotatingFileHandler):
    """ https://stackoverflow.com/questions/1407474 """
    def _open(self):
        prevumask = os.umask(0o002)
        rtv = logging.handlers.RotatingFileHandler._open(self)
        os.umask(prevumask)
        return rtv

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(asctime)s [%(levelname)s] %(module)s"+\
                    "%(name)s %(process)d %(thread)d: %(message)s"
        },
        "simple": {
            "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
        },
    },
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "settings.local.GroupWriteRotatingFileHandler",
            "filename": "venv/debug/request.log",
            "maxBytes": 1024*1024*5, # 5 MB
            "backupCount": 5,
            "formatter": "simple",
        },
    },
    "loggers": {
        "django.request": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}
